"""
ูุญุฏุฉ ุฅุฏุงุฑุฉ ุฅุนุฏุงุฏุงุช ุงูุจูุช
ุชุชูุญ ูููุดุฑููู ุชุบููุฑ ุงูุฅุนุฏุงุฏุงุช ุงูุฃุณุงุณูุฉ ููุจูุช ูุซู ูุนุฑู ุงููุทูุฑ ูุฑุณุงูุฉ ุงูุชุฑุญูุจ ูุฅุนุฏุงุฏุงุช ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
"""

import json
import os
from typing import Dict, Any, Tuple, List, Optional

# ูุณุงุฑ ููู ุงูุฅุนุฏุงุฏุงุช
SETTINGS_FILE = 'data/bot_settings.json'

# ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ
DEFAULT_SETTINGS = {
    "developer_id": "5643970536",  # ูุนุฑู ุงููุทูุฑ
    "developer_username": "@Dv_Website",  # ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ
    "welcome_message": """๐ค ุฃููุงู ุจู ูู ุจูุช ุงูููุณููู ูุงูุฅุฏุงุฑุฉ!

ุงูููุฒุงุช:
- ุชุดุบูู ูุชุญููู ุงูููุณููู ูู ููุชููุจ
- ุฅุฏุงุฑุฉ ุงููุฌููุนุงุช ูุญูุงูุชูุง
- ุฏุนู ููุฒุงุช ุงููุฑุขู ุงููุฑูู ูุงูุตูุงุฉ
- ุงุณุชุฌุงุจุฉ ุณุฑูุนุฉ ูุชุฌุฑุจุฉ ุณูุณุฉ

ุฃุถููู ุฅูู ูุฌููุนุชู ูุงุณุชูุชุน ุจุงูููุฒุงุช ุงููุชุนุฏุฏุฉ!""",  # ุฑุณุงูุฉ ุงูุชุฑุญูุจ
    "bot_channel": "@DARKCODE_Channel",  # ููุงุฉ ุงูุจูุช
    "force_subscription": {
        "enabled": False,  # ุชูุนูู ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
        "channel": "@DARKCODE_Channel",  # ููุงุฉ ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
        "message": "๐ ุนููู ุงูุงุดุชุฑุงู ูู ุงูููุงุฉ ุฃููุงู ูุงุณุชุฎุฏุงู ุงูุจูุช\n\nุงุดุชุฑู ุซู ุงุถุบุท 'ุชุญูู ูู ุงูุงุดุชุฑุงู'",  # ุฑุณุงูุฉ ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
    }
}

# ุชุญููู ุงูุฅุนุฏุงุฏุงุช
def load_settings() -> Dict[str, Any]:
    """
    ุชุญููู ุฅุนุฏุงุฏุงุช ุงูุจูุช ูู ุงูููู
    
    Returns:
        Dict[str, Any]: ุฅุนุฏุงุฏุงุช ุงูุจูุช
    """
    if not os.path.exists('data'):
        os.makedirs('data')
        
    if not os.path.exists(SETTINGS_FILE):
        save_settings(DEFAULT_SETTINGS)
        return DEFAULT_SETTINGS
    
    try:
        with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
            settings = json.load(f)
            
            # ุงูุชุฃูุฏ ูู ูุฌูุฏ ุฌููุน ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ
            for key, value in DEFAULT_SETTINGS.items():
                if key not in settings:
                    settings[key] = value
                elif isinstance(value, dict) and isinstance(settings[key], dict):
                    # ูุฑุงุฌุนุฉ ุงูุฅุนุฏุงุฏุงุช ุงููุฑุนูุฉ
                    for sub_key, sub_value in value.items():
                        if sub_key not in settings[key]:
                            settings[key][sub_key] = sub_value
                            
            return settings
    except (json.JSONDecodeError, FileNotFoundError):
        # ูู ุญุงูุฉ ูุฌูุฏ ุฎุทุฃ ูู ุงููููุ ุงุณุชุฎุฏุงู ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ
        save_settings(DEFAULT_SETTINGS)
        return DEFAULT_SETTINGS

# ุญูุธ ุงูุฅุนุฏุงุฏุงุช
def save_settings(settings: Dict[str, Any]) -> None:
    """
    ุญูุธ ุฅุนุฏุงุฏุงุช ุงูุจูุช ูู ุงูููู
    
    Args:
        settings (Dict[str, Any]): ุงูุฅุนุฏุงุฏุงุช ุงููุฑุงุฏ ุญูุธูุง
    """
    if not os.path.exists('data'):
        os.makedirs('data')
        
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(settings, f, ensure_ascii=False, indent=4)

# ุงูุญุตูู ุนูู ูุนุฑู ุงููุทูุฑ
def get_developer_id() -> str:
    """
    ุงูุญุตูู ุนูู ูุนุฑู ุงููุทูุฑ
    
    Returns:
        str: ูุนุฑู ุงููุทูุฑ
    """
    settings = load_settings()
    return settings.get("developer_id", DEFAULT_SETTINGS["developer_id"])

# ุงูุญุตูู ุนูู ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ
def get_developer_username() -> str:
    """
    ุงูุญุตูู ุนูู ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ
    
    Returns:
        str: ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ
    """
    settings = load_settings()
    return settings.get("developer_username", DEFAULT_SETTINGS["developer_username"])

# ุงูุญุตูู ุนูู ุฑุณุงูุฉ ุงูุชุฑุญูุจ
def get_welcome_message() -> str:
    """
    ุงูุญุตูู ุนูู ุฑุณุงูุฉ ุงูุชุฑุญูุจ
    
    Returns:
        str: ุฑุณุงูุฉ ุงูุชุฑุญูุจ
    """
    settings = load_settings()
    return settings.get("welcome_message", DEFAULT_SETTINGS["welcome_message"])

# ุงูุญุตูู ุนูู ููุงุฉ ุงูุจูุช
def get_bot_channel() -> str:
    """
    ุงูุญุตูู ุนูู ููุงุฉ ุงูุจูุช
    
    Returns:
        str: ููุงุฉ ุงูุจูุช
    """
    settings = load_settings()
    return settings.get("bot_channel", DEFAULT_SETTINGS["bot_channel"])

# ุงูุญุตูู ุนูู ุฅุนุฏุงุฏุงุช ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
def get_force_subscription_settings() -> Dict[str, Any]:
    """
    ุงูุญุตูู ุนูู ุฅุนุฏุงุฏุงุช ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
    
    Returns:
        Dict[str, Any]: ุฅุนุฏุงุฏุงุช ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
    """
    settings = load_settings()
    return settings.get("force_subscription", DEFAULT_SETTINGS["force_subscription"])

# ุชุญุฏูุซ ูุนุฑู ุงููุทูุฑ
def update_developer_id(developer_id: str) -> Tuple[bool, str]:
    """
    ุชุญุฏูุซ ูุนุฑู ุงููุทูุฑ
    
    Args:
        developer_id (str): ูุนุฑู ุงููุทูุฑ ุงูุฌุฏูุฏ
        
    Returns:
        Tuple[bool, str]: (ูุฌุงุญ ุงูุนูููุฉุ ุฑุณุงูุฉ)
    """
    try:
        settings = load_settings()
        settings["developer_id"] = developer_id
        save_settings(settings)
        return True, "ุชู ุชุญุฏูุซ ูุนุฑู ุงููุทูุฑ ุจูุฌุงุญ"
    except Exception as e:
        return False, f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ูุนุฑู ุงููุทูุฑ: {str(e)}"

# ุชุญุฏูุซ ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ
def update_developer_username(username: str) -> Tuple[bool, str]:
    """
    ุชุญุฏูุซ ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ
    
    Args:
        username (str): ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ ุงูุฌุฏูุฏ
        
    Returns:
        Tuple[bool, str]: (ูุฌุงุญ ุงูุนูููุฉุ ุฑุณุงูุฉ)
    """
    try:
        # ุงูุชุฃูุฏ ูู ุฃู ุงุณู ุงููุณุชุฎุฏู ูุจุฏุฃ ุจู @
        if not username.startswith('@'):
            username = f'@{username}'
            
        settings = load_settings()
        settings["developer_username"] = username
        save_settings(settings)
        return True, "ุชู ุชุญุฏูุซ ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ ุจูุฌุงุญ"
    except Exception as e:
        return False, f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ุงุณู ูุณุชุฎุฏู ุงููุทูุฑ: {str(e)}"

# ุชุญุฏูุซ ุฑุณุงูุฉ ุงูุชุฑุญูุจ
def update_welcome_message(message: str) -> Tuple[bool, str]:
    """
    ุชุญุฏูุซ ุฑุณุงูุฉ ุงูุชุฑุญูุจ
    
    Args:
        message (str): ุฑุณุงูุฉ ุงูุชุฑุญูุจ ุงูุฌุฏูุฏุฉ
        
    Returns:
        Tuple[bool, str]: (ูุฌุงุญ ุงูุนูููุฉุ ุฑุณุงูุฉ)
    """
    try:
        settings = load_settings()
        settings["welcome_message"] = message
        save_settings(settings)
        return True, "ุชู ุชุญุฏูุซ ุฑุณุงูุฉ ุงูุชุฑุญูุจ ุจูุฌุงุญ"
    except Exception as e:
        return False, f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ุฑุณุงูุฉ ุงูุชุฑุญูุจ: {str(e)}"

# ุชุญุฏูุซ ููุงุฉ ุงูุจูุช
def update_bot_channel(channel: str) -> Tuple[bool, str]:
    """
    ุชุญุฏูุซ ููุงุฉ ุงูุจูุช
    
    Args:
        channel (str): ููุงุฉ ุงูุจูุช ุงูุฌุฏูุฏุฉ
        
    Returns:
        Tuple[bool, str]: (ูุฌุงุญ ุงูุนูููุฉุ ุฑุณุงูุฉ)
    """
    try:
        # ุงูุชุฃูุฏ ูู ุฃู ุงุณู ุงูููุงุฉ ูุจุฏุฃ ุจู @
        if not channel.startswith('@'):
            channel = f'@{channel}'
            
        settings = load_settings()
        settings["bot_channel"] = channel
        save_settings(settings)
        return True, "ุชู ุชุญุฏูุซ ููุงุฉ ุงูุจูุช ุจูุฌุงุญ"
    except Exception as e:
        return False, f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ููุงุฉ ุงูุจูุช: {str(e)}"

# ุชุญุฏูุซ ุฅุนุฏุงุฏุงุช ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
def update_force_subscription(enabled: bool, channel: str = None, message: str = None) -> Tuple[bool, str]:
    """
    ุชุญุฏูุซ ุฅุนุฏุงุฏุงุช ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
    
    Args:
        enabled (bool): ุชูุนูู/ุชุนุทูู ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
        channel (str, optional): ููุงุฉ ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
        message (str, optional): ุฑุณุงูุฉ ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู
        
    Returns:
        Tuple[bool, str]: (ูุฌุงุญ ุงูุนูููุฉุ ุฑุณุงูุฉ)
    """
    try:
        settings = load_settings()
        
        # ุชุญุฏูุซ ุงูุฅุนุฏุงุฏุงุช
        settings["force_subscription"]["enabled"] = enabled
        
        if channel:
            # ุงูุชุฃูุฏ ูู ุฃู ุงุณู ุงูููุงุฉ ูุจุฏุฃ ุจู @
            if not channel.startswith('@'):
                channel = f'@{channel}'
                
            settings["force_subscription"]["channel"] = channel
            
        if message:
            settings["force_subscription"]["message"] = message
            
        save_settings(settings)
        
        if enabled:
            return True, "ุชู ุชูุนูู ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู ุจูุฌุงุญ"
        else:
            return True, "ุชู ุชุนุทูู ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู ุจูุฌุงุญ"
    except Exception as e:
        return False, f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ุฅุนุฏุงุฏุงุช ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู: {str(e)}"

# ุงูุชุญูู ูู ุงูุงุดุชุฑุงู ูู ุงูููุงุฉ
async def check_subscription(bot, user_id: int) -> bool:
    """
    ุงูุชุญูู ูู ุงุดุชุฑุงู ุงููุณุชุฎุฏู ูู ุงูููุงุฉ ุงููุทููุจุฉ
    
    Args:
        bot: ูุงุฆู ุงูุจูุช
        user_id (int): ูุนุฑู ุงููุณุชุฎุฏู
        
    Returns:
        bool: ูู ุงููุณุชุฎุฏู ูุดุชุฑู ูู ุงูููุงุฉ
    """
    settings = load_settings()
    force_sub = settings.get("force_subscription", DEFAULT_SETTINGS["force_subscription"])
    
    # ุฅุฐุง ูุงู ุงูุงุดุชุฑุงู ุงูุฅุฌุจุงุฑู ุบูุฑ ููุนู
    if not force_sub.get("enabled", False):
        return True
        
    channel = force_sub.get("channel", "")
    
    try:
        member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False